// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package domain

import (
	"context"
	"database/sql"
)

const createPetAndReturnId = `-- name: CreatePetAndReturnId :execresult
INSERT INTO pets (id, name)
VALUES (?, ?)
`

type CreatePetAndReturnIdParams struct {
	ID   string
	Name sql.NullString
}

func (q *Queries) CreatePetAndReturnId(ctx context.Context, arg CreatePetAndReturnIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPetAndReturnId, arg.ID, arg.Name)
}

const getPetById = `-- name: GetPetById :one
SELECT id, name, number FROM pets
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPetById(ctx context.Context, id string) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetById, id)
	var i Pet
	err := row.Scan(&i.ID, &i.Name, &i.Number)
	return i, err
}
